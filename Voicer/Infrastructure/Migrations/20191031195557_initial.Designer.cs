// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VotingApp.Infrastructure.DataAccess;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(VotingDbContext))]
    [Migration("20191031195557_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VotingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VotingOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VotingId");

                    b.HasIndex("VotingOptionId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Voting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Voting");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "every year...",
                            EndDate = new DateTime(2019, 11, 12, 19, 55, 57, 212, DateTimeKind.Utc).AddTicks(7580),
                            Name = "Where will be the new year's corporate party",
                            StartDate = new DateTime(2019, 10, 31, 19, 55, 57, 212, DateTimeKind.Utc).AddTicks(7020)
                        },
                        new
                        {
                            Id = -2,
                            Description = "Petia or Zelia",
                            EndDate = new DateTime(2019, 11, 12, 19, 55, 57, 212, DateTimeKind.Utc).AddTicks(8360),
                            Name = "Elections of the President of Ukraine",
                            StartDate = new DateTime(2019, 10, 31, 19, 55, 57, 212, DateTimeKind.Utc).AddTicks(8350)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.VotingOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VotingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VotingId");

                    b.ToTable("VotingOption");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Message", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Entities.Chat", null)
                        .WithMany("Message")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Vote", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");

                    b.HasOne("DataAccessLayer.Models.Entities.Voting", "Voting")
                        .WithMany("Votes")
                        .HasForeignKey("VotingId");

                    b.HasOne("DataAccessLayer.Models.Entities.VotingOption", "VotingOption")
                        .WithMany()
                        .HasForeignKey("VotingOptionId");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.Voting", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Entities.User", null)
                        .WithMany("CreatedVoting")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Entities.VotingOption", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Entities.Voting", null)
                        .WithMany("VotingOption")
                        .HasForeignKey("VotingId");
                });
#pragma warning restore 612, 618
        }
    }
}
